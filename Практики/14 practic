void MainWndAddMenus(HWND hWnd) {
	HMENU RootMenu = CreateMenu();

	HMENU SubMenu = CreateMenu();

	AppendMenu(SubMenu, MF_STRING, OnClearField, L"Clear");
	AppendMenu(SubMenu, MF_STRING, OnSaveFile, L"Save");
	AppendMenu(SubMenu, MF_STRING, OnLoadFile, L"Load");
	AppendMenu(SubMenu, MF_SEPARATOR, NULL, NULL);
	AppendMenu(SubMenu, MF_STRING, OnExitSoftware, L"Exit");

	AppendMenu(RootMenu, MF_POPUP, (UINT_PTR)SubMenu, L"File");
	AppendMenu(RootMenu, MF_STRING, (UINT_PTR)SubMenu, L"Help");
	SetMenu(hWnd, RootMenu);

}

void MainWndAddWidgets(HWND hWnd) {

	hStaticControl = CreateWindowA("static", "Welcome to DKAudioTeka! \n (Прежде чем ввести название песни, нажмите кнопку Clear)", WS_VISIBLE | WS_CHILD | ES_CENTER, 200, 5, 280, 48, hWnd, NULL, NULL, NULL);
	hEditControl = CreateWindowA("edit", "Введите название песни:", WS_VISIBLE | WS_CHILD | ES_MULTILINE | WS_VSCROLL | ES_CENTER, 5, 60, 250, 50, hWnd, NULL, NULL, NULL);
	hStaticControl2 = CreateWindowA("static", "", WS_VISIBLE | WS_CHILD | ES_CENTER, 5, 115, 475, 60, hWnd, NULL, NULL, NULL);

	CreateWindowA("button", "Clear", WS_VISIBLE | WS_CHILD | ES_CENTER, 5, 5, 120, 30, hWnd, (HMENU)OnClearField, NULL, NULL);
	CreateWindowA("button", "Search", WS_VISIBLE | WS_CHILD | ES_CENTER, 130, 5, 60, 30, hWnd, (HMENU)OnReadField, NULL, NULL);

}
void SaveData(LPCSTR path) {
	HANDLE FileToSave = CreateFileA(
		path,
		GENERIC_WRITE,
		0,
		NULL,
		CREATE_ALWAYS,
		FILE_ATTRIBUTE_NORMAL,
		NULL);

	int saveLenth = GetWindowTextLength(hEditControl) + 1;
	char* data = new char[saveLenth];

	saveLenth = GetWindowTextA(hEditControl, data, saveLenth);

	DWORD bytesIterated;
	WriteFile(FileToSave, data, saveLenth, &bytesIterated, NULL);

	CloseHandle(FileToSave);
	delete[] data;
}
void LoadData(LPCSTR path) {
	HANDLE FileToLoad = CreateFileA(
		path,
		GENERIC_READ,
		0,
		NULL,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL,
		NULL);

	DWORD bytesIterated;
	ReadFile(FileToLoad, Buffer, TextBufferSize, &bytesIterated, NULL);

	SetWindowTextA(hEditControl, Buffer);

	CloseHandle(FileToLoad);

}
void SetOpenFileParams(HWND hWnd) {
	ZeroMemory(&ofn, sizeof(ofn));
	ofn.lStructSize = sizeof(ofn);
	ofn.hwndOwner = hWnd;
	ofn.lpstrFile = filename;
	ofn.nMaxFile = sizeof(filename);
	ofn.lpstrFilter = "*.txt";
	ofn.lpstrFileTitle = NULL;
	ofn.nMaxFileTitle = 0;
	ofn.lpstrInitialDir = "base.txt";
	ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;

}
void SearchSong(HWND hWnd) {
	string query; // слово, которое ищем
	char Buffer[TextBufferSize]; // буфер для чтения из текстового поля
	query = GetWindowTextA(hEditControl, Buffer, TextBufferSize); // считываем текст из текстового поля в буфер

	FILE* file;
	errno_t err = fopen_s(&file, "G:\\Данила\\С++\\6 practic\\Ex 2\\Курсач\\base.txt", "r"); // открываем файл для чтения
	if (err != 0) { // проверяем, удалось ли открыть файл
		SetWindowTextA(hStaticControl2, "Ошибка открытия файла.");
		return;
	}

	bool found = false; // флаг для проверки, найдено ли слово
	while (fgets(Buffer, TextBufferSize, file)) { // читаем строки из файла
		if (strstr(Buffer, query.c_str())) { // ищем слово в строке
			found = true;
			break;
		}
	}
	fclose(file); // закрываем файл

	if (found) { // слово найдено
		sprintf_s(Buffer2, TextBufferSize, "%s", query.c_str()); // форматируем строку и сохраняем ее в буфер
		SetWindowTextA(hStaticControl2, Buffer2);
	}
	else { // слово не найдено
		SetWindowTextA(hStaticControl2, "Песня не найдена.");
	}
}
